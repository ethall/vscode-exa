# yaml-language-server: $schema=../exa.docs.schema.json

# TODO: revise the wording of operand descriptions to be intruction-specific.
documentation:
  # Registers
  - name: X
    description: >
      The **X** register is a general-purpose storage register and can store a number or a
      keyword.
  - name: T
    description: >
      The **T** register is a general-purpose storage register and can store a number or a
      keyword. It is also the destination for **TEST** instructions, and is the criterion for
      conditional jumps (**TJMP** and **FJMP**).
  - name: F
    description: >
      The **F** register allows an EXA to read and write the contents of a held file. When an
      EXA grabs a file, its “file cursor” will be set to the first value in the file. Reading from
      the **F** register will read this value; Writing to the **F** register will overwrite this value.
      After reading or writing the **F** register, the file cursor will automatically advance.
      Writing to the end of the file will append a new value instead of overwriting.
  - name: M
    description: >
      The **M** register controls an EXA’s message-passing functionality. When an EXA writes
      to the **M** register the value will be stored in that EXA’s outgoing message slot until
      another EXA reads from the **M** register and receives the previously written value.
      Both numbers and keywords can be transferred in this way.


      If an EXA writes to the **M** register, it will pause execution until that value is read by
      another EXA. If an EXA reads from the **M** register, it will pause execution until a
      value is available to be read. If two or more EXAs attempt to read from another EXA
      at the same time (or vice versa), one will succeed but which one succeeds will be
      unpredictable.


      By default, an EXA can communicate with any other EXA in the same network. This
      can be restricted to EXAs in the same host by toggling the global / local setting in
      the EXODUS interface, or by executing a **MODE** instruction. An EXA in global mode
      cannot communicate with an EXA in local mode, even if they are in the same host.

  # Manipulating Values
  - name: COPY
    description: Copy the value of the first operand into the second operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: ADDI
    description: >
      Add the value of the first operand to the value of the second operand and store the
      result in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: SUBI
    description: >
      Subtract the value of the first operand by the value of the second operand and store the
      result in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: MULI
    description: >
      Multiply the value of the first operand by the value of the second operand and store the
      result in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: DIVI
    description: >
      Divide the value of the first operand by the value of the second operand and store the
      floored result in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: MODI
    description: >
      Divide the value of the first operand by the value of the second operand and store the
      remainder in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
  - name: SWIZ
    description: >
      Swizzle the value of the first operand using the value of the second operand as a swizzle
      mask and store the result in the third operand. The swizzle instruction can be used to
      rearrange and/or extract the digits in a number as shown:

      |Input|Mask|Result|
      |-----|----|------|
      |6789|4321|6789|
      |6789|1234|9876|
      |6789|3333|7777|
      |6789|1211|9899|
      |6789|-4321|-6789|
      |-6789|-4321|6789|
      |6789|2000|8000|
      |6789|0001|0009|
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.

  # Branching
  - name: MARK
    description: Mark this line with the specified label. **MARK** is a pseudo-instruction and is not executed.
    operands:
      - A label defined by a **MARK** pseudo-instruction.
  - name: JUMP
    description: Jump to the specified label.
    operands:
      - A label defined by a **MARK** pseudo-instruction.
  - name: TJMP
    description: >
      Jump to the specified label if the **T** register equals 1 (or any value other than 0). This
      corresponds to a **TEST** result that was true.
    operands:
      - A label defined by a **MARK** pseudo-instruction.
  - name: FJMP
    description: >
      Jump to the specified label if the **T** register equals 0. This corresponds to a **TEST** result
      that was false.
    operands:
      - A label defined by a **MARK** pseudo-instruction.

  # Testing Values
  - name: TEST
    description: >
      Compare the value of the first operand to the value of the second operand. If they are
      equal, set the **T** register to 1, otherwise set the **T** register to 0. The same syntax is used
      for the < (less than) and > (greater than) tests.
    operands:
      - A register, or a number between -9999 and 9999.
      - ""
      - A register, or a number between -9999 and 9999.

  # Lifecycle
  - name: REPL
    description: >
      Create a copy of this EXA and jump to the specified label in the copy.
      If an EXA is holding a file when executing a **REPL** instruction the file will not be copied
      and will remain held by the original EXA.
    operands:
      - A label defined by a **MARK** pseudo-instruction.
  - name: HALT
    description: Terminate this EXA. If it was holding a file, the file is dropped.
  - name: KILL
    description: >
      Terminate another EXA in the same host as this EXA, prioritizing EXAs created by
      the same user. If there is more than one possible target, the target will be chosen in an
      unpredictable manner.

  # Movement
  - name: LINK
    description: Traverse the link with the specified ID.
    operands:
      - A register, or a number between -9999 and 9999.
  - name: HOST
    description: Copy the name of the current host into the specified register.
    operands:
      - A register.

  # Communication
  - name: MODE
    description: Toggle the **M** register between global and local mode.
  - name: VOID
    description: Read and discard a value from the **M** register.
  - name: TEST
    description: >
      If this EXA could read from another EXA without pausing, set the **T** register to 1,
      otherwise set the **T** register to 0.
    operands:
      - The **MRD** keyword.

  # File Manipulation
  - name: MAKE
    description: Create and grab a new file.
  - name: GRAB
    description: Grab the file with the specified ID.
    operands:
      - A register, or a number between -9999 and 9999.
  - name: FILE
    description: Copy the ID of the held file into the specified register.
    operands:
      - A register.
  - name: SEEK
    description: >
      Move the file cursor forward (positive) or backward (negative) by the specified number
      of values.


      If **SEEK** would move the file cursor past the beginning or end of the file it will instead
      be clamped. Thus, you can use values of -9999 or 9999 to reliably move to the
      beginning or end of the file.
    operands:
      - A register, or a number between -9999 and 9999.
  - name: VOID
    description: Remove the value highlighted by the file cursor from the currently held file.
    operands:
      - The **F** register.
  - name: DROP
    description: Drop the currently held file.
  - name: WIPE
    description: Delete the currently held file.
  - name: TEST
    description: >
      If the file pointer is currently at the end of the held file, set the **T** register to 1, otherwise
      set the **T** register to 0.
    operands:
      - The **EOF** keyword.

  # Miscellaneous
  - name: NOTE
    description: >
      Any text following the **NOTE** pseudo-instruction will be discarded when compiling,
      allowing it to be used to write “comments” to document the code. Any text following
      a semicolon, anywhere on a line, will also be discarded.
  - name: NOOP
    description: Do nothing for one cycle.
  - name: RAND
    description: >
      Generate a random number between the first and second operands (inclusive) and
      store the result in the third operand.
    operands:
      - A register, or a number between -9999 and 9999.
      - A register, or a number between -9999 and 9999.
      - A register.
